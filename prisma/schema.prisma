generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../entity_diagram.pdf"
}

model User {
id                          String                          @id @default(uuid())
profilePicture              String?                         @map("profile_picture")
name                        String
email                       String                          @unique
password                    String
team                        String?
chapter                     String?
role                        String?
resetToken                  String?
isAdmin                     Boolean?                        @map("is_admin")
isVerified                  Boolean?                        @default(false) @map("is_verified")
emailNotification           String?                         @default("all") @map("email_notification")
results                     Result[]
createdAt                   DateTime                        @default(now()) @map("created_at")
updatedAt                   DateTime                        @default(now()) @map("updated_at")
isDeleted                   Boolean?                        @default(false) @map("is_deleted")
deletedAt                   DateTime?                       @map("deleted_at")

@@map("users")
}

model Test {
id                          String                          @id @default(uuid())
title                       String?                         @unique
system                      String[]
computationalFundamentals   String[]
person                      String[]
process                     String[]
test                        String[]
design                      String[]
toolshop                    String[]
createdAt                   DateTime                        @default(now()) @map("created_at")
updatedAt                   DateTime                        @default(now()) @map("updated_at")

@@map("tests")
}

model Specialtie {
id                          String                          @id @default(uuid())
performance                 String                          @unique
description                 String
system                      Int
person                      Int
technology                  Int
process                     Int
influence                   Int
createdAt                   DateTime                        @default(now()) @map("created_at")
updatedAt                   DateTime                        @default(now()) @map("updated_at")

@@map("specialties")
}

model Result {
id                          String                          @id @default(uuid())
user                        User?                           @relation(fields: [userId], references: [id], onDelete: Cascade)
userId                      String?
nextRole                    String?                         @map("next_role")
system                      Int?
person                      Int?
process                     Int?
technology                  Int?
influence                   Int?
isValided                   String?                         @map("is_valided")
createdAt                   DateTime                        @default(now()) @map("created_at")
updatedAt                   DateTime                        @default(now()) @map("updated_at")

@@map("results")
}
